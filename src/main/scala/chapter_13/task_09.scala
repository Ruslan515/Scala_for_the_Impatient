/*
Компилятор Scala трансформирует выражение for/yield
for (i <- 1 to 10; j <- 1 to i) yield i * j
в вызовы flatMap и map, как показано ниже:
(1 to 10).flatMap(i => (1 to i).map(j => i * j))
Объясните, когда используется flatMap. Подсказка: что полу-
чится в результате выполнения (1 to i).map(j => i * j), когда i
принимает значения 1, 2, 3?
Что случится, если в выражении for/yield использовать три
генератора?


map - принимает ф-ю и применяет ее ко всем элементам массива и
возвращает массив значений, который вернула ф-я(в нашем случае i * j).
==> (1 to i).map(j => i * j) - принимает массив от 1 до i и
умножает его на i. На выходе получим массив вида:
Array(1 * i, 2 * i, ... , i * i).
Таких массивов будет 10, т.к. (1 to to).flatMap.
т.к. for (i <- 1 to 10; j <- 1 to i) yield i * j возвращет
коллекцию которая представляет собой последовательность чисел, то
нужно "разгладить" рез-ы map.
 */
package chapter_13

object task_09 extends App {

}
